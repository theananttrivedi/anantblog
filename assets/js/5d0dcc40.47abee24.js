"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[996],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),h=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=h(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=h(n),m=s,d=p["".concat(l,".").concat(m)]||p[m]||c[m]||o;return n?r.createElement(d,a(a({ref:t},u),{},{components:n})):r.createElement(d,a({ref:t},u))}));function m(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,a=new Array(o);a[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var h=2;h<o;h++)a[h]=n[h];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8602:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>h});var r=n(7462),s=(n(7294),n(3905));const o={},a=void 0,i={unversionedId:"Promises/Promise Chaining",id:"Promises/Promise Chaining",title:"Promise Chaining",description:"Let\u2019s return to the problem mentioned in the chapter Introduction we have a sequence of asynchronous tasks to be performed one after another \u2014 for instance, loading scripts. How can we code it well?",source:"@site/docs/Promises/Promise Chaining.md",sourceDirName:"Promises",slug:"/Promises/Promise Chaining",permalink:"/anantblog/Promises/Promise Chaining",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Promise API",permalink:"/anantblog/Promises/Promise API"},next:{title:"Promises",permalink:"/anantblog/Promises/"}},l={},h=[],u={toc:h};function c(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Let\u2019s return to the problem mentioned in the chapter Introduction: callbacks: we have a sequence of asynchronous tasks to be performed one after another \u2014 for instance, loading scripts. How can we code it well?"),(0,s.kt)("p",null,"Promises provide a couple of recipes to do that."),(0,s.kt)("p",null,"In this chapter we cover promise chaining."),(0,s.kt)("p",null,"It looks like this:"),(0,s.kt)("p",null,"new Promise(function(resolve, reject) {"),(0,s.kt)("p",null,"  setTimeout(() => resolve(1), 1000); // (*)"),(0,s.kt)("p",null,"}).then(function(result) { // (**)"),(0,s.kt)("p",null,"  alert(result); // 1\nreturn result * 2;"),(0,s.kt)("p",null,"}).then(function(result) { // (***)"),(0,s.kt)("p",null,"  alert(result); // 2\nreturn result * 2;"),(0,s.kt)("p",null,"}).then(function(result) {"),(0,s.kt)("p",null,"  alert(result); // 4\nreturn result * 2;"),(0,s.kt)("p",null,"});\nThe idea is that the result is passed through the chain of .then handlers."),(0,s.kt)("p",null,"Here the flow is:"),(0,s.kt)("p",null,"The initial promise resolves in 1 second (*),\nThen the .then handler is called (",(0,s.kt)("strong",{parentName:"p"},"), which in turn creates a new promise (resolved with 2 value).\nThe next then (*"),") gets the result of the previous one, processes it (doubles) and passes it to the next handler.\n\u2026and so on.\nAs the result is passed along the chain of handlers, we can see a sequence of alert calls: 1 \u2192 2 \u2192 4."),(0,s.kt)("p",null,"The whole thing works, because every call to a .then returns a new promise, so that we can call the next .then on it."),(0,s.kt)("p",null,"When a handler returns a value, it becomes the result of that promise, so the next .then is called with it."),(0,s.kt)("p",null,"A classic newbie error: technically we can also add many .then to a single promise. This is not chaining."),(0,s.kt)("p",null,"For example:"),(0,s.kt)("p",null,"let promise = new Promise(function(resolve, reject) {\nsetTimeout(() => resolve(1), 1000);\n});"),(0,s.kt)("p",null,"promise.then(function(result) {\nalert(result); // 1\nreturn result * 2;\n});"),(0,s.kt)("p",null,"promise.then(function(result) {\nalert(result); // 1\nreturn result * 2;\n});"),(0,s.kt)("p",null,"promise.then(function(result) {\nalert(result); // 1\nreturn result * 2;\n});\nWhat we did here is just several handlers to one promise. They don\u2019t pass the result to each other; instead they process it independently."),(0,s.kt)("p",null,"Here\u2019s the picture (compare it with the chaining above):"),(0,s.kt)("p",null,"All .then on the same promise get the same result \u2013 the result of that promise. So in the code above all alert show the same: 1."),(0,s.kt)("p",null,"In practice we rarely need multiple handlers for one promise. Chaining is used much more often."),(0,s.kt)("p",null,"Returning promises\nA handler, used in .then(handler) may create and return a promise."),(0,s.kt)("p",null,"In that case further handlers wait until it settles, and then get its result."),(0,s.kt)("p",null,"For instance:"),(0,s.kt)("p",null,"new Promise(function(resolve, reject) {"),(0,s.kt)("p",null,"  setTimeout(() => resolve(1), 1000);"),(0,s.kt)("p",null,"}).then(function(result) {"),(0,s.kt)("p",null,"  alert(result); // 1"),(0,s.kt)("p",null,"  return new Promise((resolve, reject) => { // (",(0,s.kt)("em",{parentName:"p"},")\nsetTimeout(() => resolve(result ")," 2), 1000);\n});"),(0,s.kt)("p",null,"}).then(function(result) { // (**)"),(0,s.kt)("p",null,"  alert(result); // 2"),(0,s.kt)("p",null,"  return new Promise((resolve, reject) => {\nsetTimeout(() => resolve(result * 2), 1000);\n});"),(0,s.kt)("p",null,"}).then(function(result) {"),(0,s.kt)("p",null,"  alert(result); // 4"),(0,s.kt)("p",null,"});\nHere the first .then shows 1 and returns new Promise(\u2026) in the line (",(0,s.kt)("em",{parentName:"p"},"). After one second it resolves, and the result (the argument of resolve, here it\u2019s result ")," 2) is passed on to the handler of the second .then. That handler is in the line (**), it shows 2 and does the same thing."),(0,s.kt)("p",null,"So the output is the same as in the previous example: 1 \u2192 2 \u2192 4, but now with 1 second delay between alert calls."),(0,s.kt)("p",null,"Returning promises allows us to build chains of asynchronous actions."),(0,s.kt)("p",null,"Example: loadScript\nLet\u2019s use this feature with the promisified loadScript, defined in the previous chapter, to load scripts one by one, in sequence:"),(0,s.kt)("p",null,'loadScript("/article/promise-chaining/one.js")\n.then(function(script) {\nreturn loadScript("/article/promise-chaining/two.js");\n})\n.then(function(script) {\nreturn loadScript("/article/promise-chaining/three.js");\n})\n.then(function(script) {\n// use functions declared in scripts\n// to show that they indeed loaded\none();\ntwo();\nthree();\n});\nThis code can be made bit shorter with arrow functions:'),(0,s.kt)("p",null,'loadScript("/article/promise-chaining/one.js")\n.then(script => loadScript("/article/promise-chaining/two.js"))\n.then(script => loadScript("/article/promise-chaining/three.js"))\n.then(script => {\n// scripts are loaded, we can use functions declared there\none();\ntwo();\nthree();\n});\nHere each loadScript call returns a promise, and the next .then runs when it resolves. Then it initiates the loading of the next script. So scripts are loaded one after another.'),(0,s.kt)("p",null,"We can add more asynchronous actions to the chain. Please note that the code is still \u201cflat\u201d \u2014 it grows down, not to the right. There are no signs of the \u201cpyramid of doom\u201d."),(0,s.kt)("p",null,"Technically, we could add .then directly to each loadScript, like this:"),(0,s.kt)("p",null,'loadScript("/article/promise-chaining/one.js").then(script1 => {\nloadScript("/article/promise-chaining/two.js").then(script2 => {\nloadScript("/article/promise-chaining/three.js").then(script3 => {\n// this function has access to variables script1, script2 and script3\none();\ntwo();\nthree();\n});\n});\n});\nThis code does the same: loads 3 scripts in sequence. But it \u201cgrows to the right\u201d. So we have the same problem as with callbacks.'),(0,s.kt)("p",null,"People who start to use promises sometimes don\u2019t know about chaining, so they write it this way. Generally, chaining is preferred."),(0,s.kt)("p",null,"Sometimes it\u2019s ok to write .then directly, because the nested function has access to the outer scope. In the example above the most nested callback has access to all variables script1, script2, script3. But that\u2019s an exception rather than a rule."),(0,s.kt)("p",null,"Thenables\nTo be precise, a handler may return not exactly a promise, but a so-called \u201cthenable\u201d object \u2013 an arbitrary object that has a method .then. It will be treated the same way as a promise."),(0,s.kt)("p",null,"The idea is that 3rd-party libraries may implement \u201cpromise-compatible\u201d objects of their own. They can have an extended set of methods, but also be compatible with native promises, because they implement .then."),(0,s.kt)("p",null,"Here\u2019s an example of a thenable object:"),(0,s.kt)("p",null,"class Thenable {\nconstructor(num) {\nthis.num = num;\n}\nthen(resolve, reject){\nalert(resolve); // function() { native code }\n// resolve with this.num",(0,s.kt)("em",{parentName:"p"},"2 after the 1 second\nsetTimeout(() => resolve(this.num ")," 2), 1000); // (**)\n}\n}"),(0,s.kt)("p",null,"new Promise(resolve => resolve(1))\n.then(result => {\nreturn new Thenable(result); // (",(0,s.kt)("em",{parentName:"p"},")\n})\n.then(alert); // shows 2 after 1000ms\nJavaScript checks the object returned by the .then handler in line ("),"): if it has a callable method named then, then it calls that method providing native functions resolve, reject as arguments (similar to an executor) and waits until one of them is called. In the example above resolve(2) is called after 1 second (**). Then the result is passed further down the chain."),(0,s.kt)("p",null,"This feature allows us to integrate custom objects with promise chains without having to inherit from Promise."),(0,s.kt)("p",null,"Bigger example: fetch\nIn frontend programming, promises are often used for network requests. So let\u2019s see an extended example of that."),(0,s.kt)("p",null,"We\u2019ll use the fetch method to load the information about the user from the remote server. It has a lot of optional parameters covered in separate chapters, but the basic syntax is quite simple:"),(0,s.kt)("p",null,"let promise = fetch(url);\nThis makes a network request to the url and returns a promise. The promise resolves with a response object when the remote server responds with headers, but before the full response is downloaded."),(0,s.kt)("p",null,"To read the full response, we should call the method response.text(): it returns a promise that resolves when the full text is downloaded from the remote server, with that text as a result."),(0,s.kt)("p",null,"The code below makes a request to user.json and loads its text from the server:"),(0,s.kt)("p",null,'fetch(\'/article/promise-chaining/user.json\')\n// .then below runs when the remote server responds\n.then(function(response) {\n// response.text() returns a new promise that resolves with the full response text\n// when it loads\nreturn response.text();\n})\n.then(function(text) {\n// ...and here\'s the content of the remote file\nalert(text); // {"name": "iliakan", "isAdmin": true}\n});\nThe response object returned from fetch also includes the method response.json() that reads the remote data and parses it as JSON. In our case that\u2019s even more convenient, so let\u2019s switch to it.'),(0,s.kt)("p",null,"We\u2019ll also use arrow functions for brevity:"),(0,s.kt)("p",null,"// same as above, but response.json() parses the remote content as JSON\nfetch('/article/promise-chaining/user.json')\n.then(response => response.json())\n.then(user => alert(user.name)); // iliakan, got user name\nNow let\u2019s do something with the loaded user."),(0,s.kt)("p",null,"For instance, we can make one more request to GitHub, load the user profile and show the avatar:"),(0,s.kt)("p",null,"// Make a request for user.json\nfetch('/article/promise-chaining/user.json')\n// Load it as json\n.then(response => response.json())\n// Make a request to GitHub\n.then(user => fetch(",(0,s.kt)("inlineCode",{parentName:"p"},"https://api.github.com/users/${user.name}"),"))\n// Load the response as json\n.then(response => response.json())\n// Show the avatar image (githubUser.avatar_url) for 3 seconds (maybe animate it)\n.then(githubUser => {\nlet img = document.createElement('img');\nimg.src = githubUser.avatar_url;\nimg.className = \"promise-avatar-example\";\ndocument.body.append(img);"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"setTimeout(() => img.remove(), 3000); // (*)\n")),(0,s.kt)("p",null,"  });\nThe code works; see comments about the details. However, there\u2019s a potential problem in it, a typical error for those who begin to use promises."),(0,s.kt)("p",null,"Look at the line (*): how can we do something after the avatar has finished showing and gets removed? For instance, we\u2019d like to show a form for editing that user or something else. As of now, there\u2019s no way."),(0,s.kt)("p",null,"To make the chain extendable, we need to return a promise that resolves when the avatar finishes showing."),(0,s.kt)("p",null,"Like this:"),(0,s.kt)("p",null,"fetch('/article/promise-chaining/user.json')\n.then(response => response.json())\n.then(user => fetch(",(0,s.kt)("inlineCode",{parentName:"p"},"https://api.github.com/users/${user.name}"),"))\n.then(response => response.json())\n.then(githubUser => new Promise(function(resolve, reject) { // (*)\nlet img = document.createElement('img');\nimg.src = githubUser.avatar_url;\nimg.className = \"promise-avatar-example\";\ndocument.body.append(img);"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"setTimeout(() => {\n  img.remove();\n  resolve(githubUser); // (**)\n}, 3000);\n")),(0,s.kt)("p",null,"  }))\n// triggers after 3 seconds\n.then(githubUser => alert(",(0,s.kt)("inlineCode",{parentName:"p"},"Finished showing ${githubUser.name}"),"));\nThat is, the .then handler in line (*) now returns new Promise, that becomes settled only after the call of resolve(githubUser) in setTimeout (**). The next .then in the chain will wait for that."),(0,s.kt)("p",null,"As a good practice, an asynchronous action should always return a promise. That makes it possible to plan actions after it; even if we don\u2019t plan to extend the chain now, we may need it later."),(0,s.kt)("p",null,"Finally, we can split the code into reusable functions:"),(0,s.kt)("p",null,"function loadJson(url) {\nreturn fetch(url)\n.then(response => response.json());\n}"),(0,s.kt)("p",null,"function loadGithubUser(name) {\nreturn loadJson(",(0,s.kt)("inlineCode",{parentName:"p"},"https://api.github.com/users/${name}"),");\n}"),(0,s.kt)("p",null,"function showAvatar(githubUser) {\nreturn new Promise(function(resolve, reject) {\nlet img = document.createElement('img');\nimg.src = githubUser.avatar_url;\nimg.className = \"promise-avatar-example\";\ndocument.body.append(img);"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"setTimeout(() => {\n  img.remove();\n  resolve(githubUser);\n}, 3000);\n")),(0,s.kt)("p",null,"  });\n}"),(0,s.kt)("p",null,"// Use them:\nloadJson('/article/promise-chaining/user.json')\n.then(user => loadGithubUser(user.name))\n.then(showAvatar)\n.then(githubUser => alert(",(0,s.kt)("inlineCode",{parentName:"p"},"Finished showing ${githubUser.name}"),"));\n// ...\nSummary\nIf a .then (or catch/finally, doesn\u2019t matter) handler returns a promise, the rest of the chain waits until it settles. When it does, its result (or error) is passed further."),(0,s.kt)("p",null,"Here\u2019s a full picture:"),(0,s.kt)("p",null,"Tasks\nPromise: then versus catch\nAre these code fragments equal? In other words, do they behave the same way in any circumstances, for any handler functions?"),(0,s.kt)("p",null,"promise.then(f1).catch(f2);\nVersus:"),(0,s.kt)("p",null,"promise.then(f1, f2);\nsolution\nThe short answer is: no, they are not equal:"),(0,s.kt)("p",null,"The difference is that if an error happens in f1, then it is handled by .catch here:"),(0,s.kt)("p",null,"promise\n.then(f1)\n.catch(f2);\n\u2026But not here:"),(0,s.kt)("p",null,"promise\n.then(f1, f2);\nThat\u2019s because an error is passed down the chain, and in the second code piece there\u2019s no chain below f1."),(0,s.kt)("p",null,"In other words, .then passes results/errors to the next .then/catch. So in the first example, there\u2019s a catch below, and in the second one there isn\u2019t, so the error is unhandled."))}c.isMDXComponent=!0}}]);
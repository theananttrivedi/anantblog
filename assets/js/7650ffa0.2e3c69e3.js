"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[642],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=r,h=c["".concat(l,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(h,s(s({ref:t},u),{},{components:n})):o.createElement(h,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9099:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={},s=void 0,i={unversionedId:"Modules/modules-introduction",id:"Modules/modules-introduction",title:"modules-introduction",description:"As our application grows bigger, we want to split it into multiple files, so called \u201cmodules\u201d. A module may contain a class or a library of functions for a specific purpose.",source:"@site/docs/Modules/modules-introduction.md",sourceDirName:"Modules",slug:"/Modules/modules-introduction",permalink:"/anantblog/Modules/modules-introduction",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"export-and-import",permalink:"/anantblog/Modules/export-and-import"},next:{title:"Promises",permalink:"/anantblog/category/promises"}},l={},p=[{value:"import.meta",id:"importmeta",level:3},{value:"In a module, \u201cthis\u201d is undefined",id:"in-a-module-this-is-undefined",level:3},{value:"Browser-specific features",id:"browser-specific-features",level:2},{value:"Module scripts are deferred",id:"module-scripts-are-deferred",level:3}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"As our application grows bigger, we want to split it into multiple files, so called \u201cmodules\u201d. A module may contain a class or a library of functions for a specific purpose."),(0,r.kt)("p",null,"For a long time, JavaScript existed without a language-level module syntax. That wasn\u2019t a problem, because initially scripts were small and simple, so there was no need."),(0,r.kt)("p",null,"But eventually scripts became more and more complex, so the community invented a variety of ways to organize code into modules, special libraries to load modules on demand."),(0,r.kt)("p",null,"To name some (for historical reasons):"),(0,r.kt)("p",null,"AMD \u2013 one of the most ancient module systems, initially implemented by the library require.js.\nCommonJS \u2013 the module system created for Node.js server.\nUMD \u2013 one more module system, suggested as a universal one, compatible with AMD and CommonJS.\nNow these all slowly became a part of history, but we still can find them in old scripts."),(0,r.kt)("p",null,"The language-level module system appeared in the standard in 2015, gradually evolved since then, and is now supported by all major browsers and in Node.js. So we\u2019ll study the modern JavaScript modules from now on."),(0,r.kt)("p",null,"What is a module?\nA module is just a file. One script is one module. As simple as that."),(0,r.kt)("p",null,"Modules can load each other and use special directives export and import to interchange functionality, call functions of one module from another one:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export keyword")," labels variables and functions that should be accessible from outside the current module.\nimport allows the import of functionality from other modules.\nFor instance, if we have a file sayHi.js exporting a function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// \ud83d\udcc1 sayHi.js\nexport function sayHi(user) {\n  alert(`Hello, ${user}!`);\n}\n\u2026Then another file may import and use it:\n\n// \ud83d\udcc1 main.js\nimport {sayHi} from './sayHi.js';\n\nalert(sayHi); // function...\nsayHi('John'); // Hello, John!\n")),(0,r.kt)("p",null,"The import directive loads the module by path ./sayHi.js relative to the current file, and assigns exported function sayHi to the corresponding variable."),(0,r.kt)("p",null,"Let\u2019s run the example in-browser."),(0,r.kt)("p",null,"As modules support special keywords and features, we must tell the browser that a script should be treated as a module, by using the attribute ",(0,r.kt)("inlineCode",{parentName:"p"},'<script type="module">'),"."),(0,r.kt)("p",null,"Like this:"),(0,r.kt)("p",null,"Resultsay.jsindex.html"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"<!doctype html>\n<script type=\"module\">\n  import {sayHi} from './say.js';\n\n  document.body.innerHTML = sayHi('John');\n<\/script>\n")),(0,r.kt)("p",null,"The browser automatically fetches and evaluates the imported module (and its imports if needed), and then runs the script."),(0,r.kt)("p",null,"Modules work only via HTTP(s), not locally\nIf you try to open a web-page locally, via file:// protocol, you\u2019ll find that import/export directives don\u2019t work. Use a local web-server, such as static-server or use the \u201clive server\u201d capability of your editor, such as VS Code Live Server Extension to test modules."),(0,r.kt)("p",null,"Core module features\nWhat\u2019s different in modules, compared to \u201cregular\u201d scripts?"),(0,r.kt)("p",null,"There are core features, valid both for browser and server-side JavaScript."),(0,r.kt)("p",null,"Always \u201cuse strict\u201d\nModules always work in strict mode. E.g. assigning to an undeclared variable will give an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module">\n  a = 5; // error\n<\/script>\n')),(0,r.kt)("p",null,"Module-level scope\nEach module has its own top-level scope. In other words, top-level variables and functions from a module are not seen in other scripts."),(0,r.kt)("p",null,"In the example below, two scripts are imported, and hello.js tries to use user variable declared in user.js. It fails, because it\u2019s a separate module (you\u2019ll see the error in the console):"),(0,r.kt)("p",null,"Resulthello.jsuser.jsindex.html"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<!doctype html>\n<script type="module" src="user.js"><\/script>\n<script type="module" src="hello.js"><\/script>\n')),(0,r.kt)("p",null,"Modules should export what they want to be accessible from outside and import what they need."),(0,r.kt)("p",null,"user.js should export the user variable.\nhello.js should import it from user.js module.\nIn other words, with modules we use import/export instead of relying on global variables."),(0,r.kt)("p",null,"This is the correct variant:"),(0,r.kt)("p",null,"Resulthello.jsuser.jsindex.html"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {user} from './user.js';\n\ndocument.body.innerHTML = user; // John\n")),(0,r.kt)("p",null,"In the browser, if we talk about HTML pages, independent top-level scope also exists for each "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module">.\n')),(0,r.kt)("p",null,'Here are two scripts on the same page, both type="module". They don\u2019t see each other\u2019s top-level variables:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module">\n  // The variable is only visible in this module script\n  let user = "John";\n<\/script>\n\n<script type="module">\n  alert(user); // Error: user is not defined\n<\/script>\n')),(0,r.kt)("p",null,'Please note:\nIn the browser, we can make a variable window-level global by explicitly assigning it to a window property, e.g. window.user = "John".'),(0,r.kt)("p",null,'Then all scripts will see it, both with type="module" and without it.'),(0,r.kt)("p",null,"That said, making such global variables is frowned upon. Please try to avoid them."),(0,r.kt)("p",null,"A module code is evaluated only the first time when imported\nIf the same module is imported into multiple other modules, its code is executed only once, upon the first import. Then its exports are given to all further importers."),(0,r.kt)("p",null,"The one-time evaluation has important consequences, that we should be aware of."),(0,r.kt)("p",null,"Let\u2019s see a couple of examples."),(0,r.kt)("p",null,"First, if executing a module code brings side-effects, like showing a message, then importing it multiple times will trigger it only once \u2013 the first time:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// \ud83d\udcc1 alert.js\nalert("Module is evaluated!");\n// Import the same module from different files\n\n// \ud83d\udcc1 1.js\nimport `./alert.js`; // Module is evaluated!\n\n// \ud83d\udcc1 2.js\nimport `./alert.js`; // (shows nothing)\n')),(0,r.kt)("p",null,"The second import shows nothing, because the module has already been evaluated."),(0,r.kt)("p",null,"There\u2019s a rule: top-level module code should be used for initialization, creation of module-specific internal data structures. If we need to make something callable multiple times \u2013 we should export it as a function, like we did with\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"sayHi"),"\xa0above."),(0,r.kt)("p",null,"Now, let\u2019s consider a deeper example."),(0,r.kt)("p",null,"Let\u2019s say, a module exports an object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'`// \ud83d\udcc1 admin.js export let admin = {   name: "John" };`\n')),(0,r.kt)("p",null,"If this module is imported from multiple files, the module is only evaluated the first time,\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),"\xa0object is created, and then passed to all further importers."),(0,r.kt)("p",null,"All importers get exactly the one and only\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),"\xa0object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// \ud83d\udcc1 1.js import {admin} from './admin.js'; \nadmin.name = \"Pete\";  \n// \ud83d\udcc1 2.js import {admin} from './admin.js'; \nalert(admin.name); \n// Pete  _// Both 1.js and 2.js reference the same admin object // Changes made in 1.js are visible in 2.js_`\n\n")),(0,r.kt)("p",null,"As you can see, when\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"1.js"),"\xa0changes the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"\xa0property in the imported\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),", then\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"2.js"),"\xa0can see the new\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin.name"),"."),(0,r.kt)("p",null,"That\u2019s exactly because the module is executed only once. Exports are generated, and then they are shared between importers, so if something changes the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin"),"\xa0object, other importers will see that."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Such behavior is actually very convenient, because it allows us to\xa0",(0,r.kt)("em",{parentName:"strong"},"configure"),"\xa0modules.")),(0,r.kt)("p",null,"In other words, a module can provide a generic functionality that needs a setup. E.g. authentication needs credentials. Then it can export a configuration object expecting the outer code to assign to it."),(0,r.kt)("p",null,"Here\u2019s the classical pattern:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"A module exports some means of configuration, e.g. a configuration object."),(0,r.kt)("li",{parentName:"ol"},"On the first import we initialize it, write to its properties. The top-level application script may do that."),(0,r.kt)("li",{parentName:"ol"},"Further imports use the module.")),(0,r.kt)("p",null,"For instance, the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin.js"),"\xa0module may provide certain functionality (e.g. authentication), but expect the credentials to come into the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"config"),"\xa0object from outside:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// \ud83d\udcc1 admin.js \nexport let config = { };  \nexport function sayHi() {   \n  alert(`Ready to serve, ${config.user}!`); \n  }\n")),(0,r.kt)("p",null,"Here,\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin.js"),"\xa0exports the\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"config"),"\xa0object (initially empty, but may have default properties too)."),(0,r.kt)("p",null,"Then in\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"init.js"),", the first script of our app, we import\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"config"),"\xa0from it and set\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"config.user"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// \ud83d\udcc1 init.js \nimport {config} from './admin.js'; \nconfig.user = \"Pete\";\n")),(0,r.kt)("p",null,"\u2026Now the module\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"admin.js"),"\xa0is configured."),(0,r.kt)("p",null,"Further importers can call it, and it correctly shows the current user:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"`// \ud83d\udcc1 another.js import {sayHi} from './admin.js';  sayHi(); // Ready to serve, _Pete_!`\n")),(0,r.kt)("h3",{id:"importmeta"},(0,r.kt)("a",{parentName:"h3",href:"https://javascript.info/modules-intro#import-meta"},"import.meta")),(0,r.kt)("p",null,"The object\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"import.meta"),"\xa0contains the information about the current module."),(0,r.kt)("p",null,"Its content depends on the environment. In the browser, it contains the URL of the script, or a current webpage URL if inside HTML:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://javascript.info/modules-intro#",title:"show"})),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://javascript.info/modules-intro#",title:"open in sandbox"})),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'`<script type="module">   alert(import.meta.url); // script URL   // for an inline script - the URL of the current HTML-page <\/script>`\n')),(0,r.kt)("h3",{id:"in-a-module-this-is-undefined"},(0,r.kt)("a",{parentName:"h3",href:"https://javascript.info/modules-intro#in-a-module-this-is-undefined"},"In a module, \u201cthis\u201d is undefined")),(0,r.kt)("p",null,"That\u2019s kind of a minor feature, but for completeness we should mention it."),(0,r.kt)("p",null,"In a module, top-level\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"this"),"\xa0is undefined."),(0,r.kt)("p",null,"Compare it to non-module scripts, where\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"this"),"\xa0is a global object:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://javascript.info/modules-intro#",title:"show"})),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://javascript.info/modules-intro#",title:"open in sandbox"})),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},'<script>   alert(this); // window <\/script>  <script type="module">   alert(this); // undefined <\/script>')),(0,r.kt)("h2",{id:"browser-specific-features"},(0,r.kt)("a",{parentName:"h2",href:"https://javascript.info/modules-intro#browser-specific-features"},"Browser-specific features")),(0,r.kt)("p",null,"There are also several browser-specific differences of scripts with\xa0",(0,r.kt)("inlineCode",{parentName:"p"},'type="module"'),"\xa0compared to regular ones."),(0,r.kt)("p",null,"You may want to skip this section for now if you\u2019re reading for the first time, or if you don\u2019t use JavaScript in a browser."),(0,r.kt)("h3",{id:"module-scripts-are-deferred"},(0,r.kt)("a",{parentName:"h3",href:"https://javascript.info/modules-intro#module-scripts-are-deferred"},"Module scripts are deferred")),(0,r.kt)("p",null,"Module scripts are\xa0",(0,r.kt)("em",{parentName:"p"},"always"),"\xa0deferred, same effect as\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"defer"),"\xa0attribute (described in the chapter\xa0",(0,r.kt)("a",{parentName:"p",href:"https://javascript.info/script-async-defer"},"Scripts: async, defer"),"), for both external and inline scripts."),(0,r.kt)("p",null,"In other words:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"downloading external module scripts\xa0",(0,r.kt)("inlineCode",{parentName:"li"},'<script type="module" src="...">'),"\xa0doesn\u2019t block HTML processing, they load in parallel with other resources.\nmodule scripts wait until the HTML document is fully ready (even if they are tiny and load faster than HTML), and then run.\nrelative order of scripts is maintained: scripts that go first in the document, execute first.\nAs a side effect, module scripts always \u201csee\u201d the fully loaded HTML-page, including HTML elements below them.")),(0,r.kt)("p",null,"For instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module">\n  alert(typeof button); // object: the script can \'see\' the button below\n  // as modules are deferred, the script runs after the whole page is loaded\n<\/script>\n\nCompare to regular script below:\n\n<script>\n  alert(typeof button); // button is undefined, the script can\'t see elements below\n  // regular scripts run immediately, before the rest of the page is processed\n<\/script>\n\n<button id="button">Button</button>\n')),(0,r.kt)("p",null,"Please note: the second script actually runs before the first! So we\u2019ll see undefined first, and then object."),(0,r.kt)("p",null,"That\u2019s because modules are deferred, so we wait for the document to be processed. The regular script runs immediately, so we see its output first."),(0,r.kt)("p",null,"When using modules, we should be aware that the HTML page shows up as it loads, and JavaScript modules run after that, so the user may see the page before the JavaScript application is ready. Some functionality may not work yet. We should put \u201cloading indicators\u201d, or otherwise ensure that the visitor won\u2019t be confused by that."),(0,r.kt)("p",null,"Async works on inline scripts\nFor non-module scripts, the async attribute only works on external scripts. Async scripts run immediately when ready, independently of other scripts or the HTML document."),(0,r.kt)("p",null,"For module scripts, it works on inline scripts as well."),(0,r.kt)("p",null,"For example, the inline script below has async, so it doesn\u2019t wait for anything."),(0,r.kt)("p",null,"It performs the import (fetches ./analytics.js) and runs when ready, even if the HTML document is not finished yet, or if other scripts are still pending."),(0,r.kt)("p",null,"That\u2019s good for functionality that doesn\u2019t depend on anything, like counters, ads, document-level event listeners."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},"\x3c!-- all dependencies are fetched (analytics.js), and the script runs --\x3e\n\x3c!-- doesn't wait for the document or other <script> tags --\x3e\n<script async type=\"module\">\n  import {counter} from './analytics.js';\n\n  counter.count();\n<\/script>\n")),(0,r.kt)("p",null,'External scripts\nExternal scripts that have type="module" are different in two aspects:'),(0,r.kt)("p",null,"External scripts with the same src run only once:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'\x3c!-- the script my.js is fetched and executed only once --\x3e\n<script type="module" src="my.js"><\/script>\n<script type="module" src="my.js"><\/script>\nExternal scripts that are fetched from another origin (e.g. another site) require CORS headers, as described in the chapter Fetch: Cross-Origin Requests. In other words, if a module script is fetched from another origin, the remote server must supply a header Access-Control-Allow-Origin allowing the fetch.\n\n\x3c!-- another-site.com must supply Access-Control-Allow-Origin --\x3e\n\x3c!-- otherwise, the script won\'t execute --\x3e\n<script type="module" src="http://another-site.com/their.js"><\/script>\n')),(0,r.kt)("p",null,"That ensures better security by default."),(0,r.kt)("p",null,"No \u201cbare\u201d modules allowed\nIn the browser, import must get either a relative or absolute URL. Modules without any path are called \u201cbare\u201d modules. Such modules are not allowed in import."),(0,r.kt)("p",null,"For instance, this import is invalid:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {sayHi} from 'sayHi'; // Error, \"bare\" module\n// the module must have a path, e.g. './sayHi.js' or wherever the module is\n")),(0,r.kt)("p",null,"Certain environments, like Node.js or bundle tools allow bare modules, without any path, as they have their own ways for finding modules and hooks to fine-tune them. But browsers do not support bare modules yet."),(0,r.kt)("p",null,'Compatibility, \u201cnomodule\u201d\nOld browsers do not understand type="module". Scripts of an unknown type are just ignored. For them, it\u2019s possible to provide a fallback using the nomodule attribute:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html"},'<script type="module">\n  alert("Runs in modern browsers");\n<\/script>\n\n<script nomodule>\n  alert("Modern browsers know both type=module and nomodule, so skip this")\n  alert("Old browsers ignore script with unknown type=module, but execute this.");\n<\/script>\n')),(0,r.kt)("p",null,"Build tools\nIn real-life, browser modules are rarely used in their \u201craw\u201d form. Usually, we bundle them together with a special tool such as Webpack and deploy to the production server."),(0,r.kt)("p",null,"One of the benefits of using bundlers \u2013 they give more control over how modules are resolved, allowing bare modules and much more, like CSS/HTML modules."),(0,r.kt)("p",null,"Build tools do the following:"),(0,r.kt)("p",null,"Take a \u201cmain\u201d module, the one intended to be put in ",(0,r.kt)("inlineCode",{parentName:"p"},'<script type="module">'),' in HTML.\nAnalyze its dependencies: imports and then imports of imports etc.\nBuild a single file with all modules (or multiple files, that\u2019s tunable), replacing native import calls with bundler functions, so that it works. \u201cSpecial\u201d module types like HTML/CSS modules are also supported.\nIn the process, other transformations and optimizations may be applied:\nUnreachable code removed.\nUnused exports removed (\u201ctree-shaking\u201d).\nDevelopment-specific statements like console and debugger removed.\nModern, bleeding-edge JavaScript syntax may be transformed to older one with similar functionality using Babel.\nThe resulting file is minified (spaces removed, variables replaced with shorter names, etc).\nIf we use bundle tools, then as scripts are bundled together into a single file (or few files), import/export statements inside those scripts are replaced by special bundler functions. So the resulting \u201cbundled\u201d script does not contain any import/export, it doesn\u2019t require type="module", and we can put it into a regular script:'),(0,r.kt)("script",{src:"bundle.js"}),(0,r.kt)("p",null,"That said, native modules are also usable. So we won\u2019t be using Webpack here: you can configure it later."),(0,r.kt)("p",null,"Summary\nTo summarize, the core concepts are:"),(0,r.kt)("p",null,"A module is a file. To make import/export work, browsers need ",(0,r.kt)("inlineCode",{parentName:"p"},'<script type="module">'),". Modules have several differences:\nDeferred by default.\nAsync works on inline scripts.\nTo load external scripts from another origin (domain/protocol/port), CORS headers are needed.\nDuplicate external scripts are ignored.\nModules have their own, local top-level scope and interchange functionality via import/export.\nModules always use strict.\nModule code is executed only once. Exports are created once and shared between importers.\nWhen we use modules, each module implements the functionality and exports it. Then we use import to directly import it where it\u2019s needed. The browser loads and evaluates the scripts automatically."),(0,r.kt)("p",null,"In production, people often use bundlers such as Webpack to bundle modules together for performance and other reasons."),(0,r.kt)("p",null,"In the next chapter we\u2019ll see more examples of modules, and how things can be exported/imported."))}d.isMDXComponent=!0}}]);
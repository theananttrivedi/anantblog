"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[680],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>d});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),s=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(a),d=r,h=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return a?n.createElement(h,l(l({ref:t},p),{},{components:a})):n.createElement(h,l({ref:t},p))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},517:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={},l="Map, Filter, Reduce and Find",o={unversionedId:"Javascript/map-filter-reduce",id:"Javascript/map-filter-reduce",title:"Map, Filter, Reduce and Find",description:"Map Filter Reduce",source:"@site/docs/Javascript/map-filter-reduce.mdx",sourceDirName:"Javascript",slug:"/Javascript/map-filter-reduce",permalink:"/anantblog/Javascript/map-filter-reduce",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Javascript",permalink:"/anantblog/category/javascript"}},u={},s=[{value:"Functional programming",id:"functional-programming",level:2},{value:"Map, filter, Reduce",id:"map-filter-reduce",level:2},{value:"Map",id:"map",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Filter",id:"filter",level:2},{value:"Reduce",id:"reduce",level:2}],p={toc:s};function c(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"map-filter-reduce-and-find"},"Map, Filter, Reduce and Find"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Map Filter Reduce",src:a(1401).Z,width:"1840",height:"772"})),(0,r.kt)("h2",{id:"functional-programming"},"Functional programming"),(0,r.kt)("p",null,"Functional programming is a programming paradigm where the output\nvalue of a function depends only on the arguments that are passed\nto the function. "),(0,r.kt)("p",null,"Calling a function will always produce the same result,\nno matter the amount of times you call it.\nThese functions are known as pure functions."),(0,r.kt)("p",null,"In Javascript we have map, filter and reduce,\nall functions that given an initial list (array of things),\ntransform it into something else,\nwhile keeping that same original list intact."),(0,r.kt)("p",null,"Functional techniques can help you write more declarative code\nthat is easier to understand at a glance, refactor, and test.\nThis looks pretty clean, shorter, expressive, concise code,\nless error-prone, easier to maintain, and easier to debug.\nWe are telling the computer what we want it to do rather than how to do it."),(0,r.kt)("p",null,"The declarative approach is easily optimizable at the complier end\nand also has fewer side effects."),(0,r.kt)("h2",{id:"map-filter-reduce"},"Map, filter, Reduce"),(0,r.kt)("p",null,"Why use map, filter and reduce?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You work directly with the current value instead of accessing\nit through an index (i.e array","[i]",");")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Avoid mutation of the original array,\ntherefore, minimizing side-effects;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"No need to manage a for loop;")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"No more creating empty arrays and push stuff into them;"))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Whenever you have a task which involves:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"translating elements"),(0,r.kt)("li",{parentName:"ul"},"finding cumulative values"),(0,r.kt)("li",{parentName:"ul"},"building subsets based on conditions.")),(0,r.kt)("p",{parentName:"admonition"},"It is an indication to use ",(0,r.kt)("strong",{parentName:"p"},"map"),", ",(0,r.kt)("strong",{parentName:"p"},"filter")," or ",(0,r.kt)("strong",{parentName:"p"},"reduce"),".")),(0,r.kt)("h2",{id:"map"},"Map"),(0,r.kt)("p",null,"Map is used when you have an array of stuff and you want to do something\nfor every item in that array."),(0,r.kt)("p",null,"take an array and modify every element in it in exactly the same way.\nYou want to translate/map all elements in an array to another set of values."),(0,r.kt)("p",null,"Map receives a callback as an argument.\nThat callback is then given the current value of the iteration,\nthe index of the iteration and the original array from which map was called."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="mapLetters.js"',title:'"mapLetters.js"'},"\n    const letters = ['a', 'b', 'd', 'e']\n    const capitalisedLetters = letters.map(letter => letter.toUpperCase())\n    console.log(capitalisedLetters)\n    // ['A', 'B', 'C', 'D', 'E']\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"How it works?"),(0,r.kt)("div",null,"Traverses the array from left to right invoking a callback function on each element with parameters (below). For each callback the value returned becomes the element in the new array. After all elements have been traversed map() returns the new array with all the translated elements.")),(0,r.kt)("h3",{id:"advantages"},"Advantages"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You don't have to manage the state of the for loop yourself.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You can operate on the element directly,\nrather than having to index into the array.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"You don't have to create a new array and push into it.\nMap returns the finished product all in one go,\nso we can simply assign the return value to a new variable.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It returns an array, so you can chain it with other array methods.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"It returns an array with the finished product,\nrather than requiring us to mutate an array inside the loop. "))),(0,r.kt)("p",null,"Keeping the number of places where you modify state to an absolute minimum is an important tenet of functional programming. It makes for safer and more intelligible code."),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Always make sure your callback contains a return statement!")),(0,r.kt)("p",{parentName:"admonition"},"The callback you pass to map must have an explicit return statement,\nor map will spit out an array full of undefined")),(0,r.kt)("h2",{id:"filter"},"Filter"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"filter")," method creates a new array with all elements that pass the test\nimplemented by the provided function."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"You want to use this whenever you want to remove unwanted elements based on a condition.")),(0,r.kt)("p",null,"Filter receives the same arguments as map,\nand works very similarly. The only difference is that the callback needs to\nreturn either true or false.\nIf it returns true then the array keeps that element and\nif it returns false the element is filtered out."),(0,r.kt)("p",null,"Just like map, filter lets us:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"avoid mutating an array inside a forEach or for loop"),(0,r.kt)("li",{parentName:"ul"},"assign its result directly to a new variable,\nrather than push into an array we defined elsewhere")),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"p"},"Always make sure your callback returns a boolean value")),(0,r.kt)("p",{parentName:"admonition"},"With filter, you must make sure it returns a boolean value."),(0,r.kt)("p",{parentName:"admonition"},"If you forget your return statement, your callback will return undefined,\nwhich filter will unhelpfully coerce to false.\nInstead of throwing an error, it will silently return an empty array!")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"How it works?"),(0,r.kt)("div",null,"Like ",(0,r.kt)("b",null,"map")," it traverses the array from left to right invoking a callback function on each element. The returned value must be a ",(0,r.kt)("b",null,"boolean")," identifying whether the element will be kept or discarded. After all elements have been traversed ",(0,r.kt)("b",null,"filter")," returns a new array with all elements that returned true.")),(0,r.kt)("h2",{id:"reduce"},"Reduce"),(0,r.kt)("p",null,"The reduce method applies a function against an accumulator\nand each element in the array (from left to right) to reduce\nit to a single value."),(0,r.kt)("p",null,"You want to find a cumulative or concatenated value based\non elements across the array.\nLike map it traverses the array from left to right invoking a callback\nfunction on each element. The value returned is the cumulative value\npassed from callback to callback. After all elements have been traversed\nreduce returns the cumulative value."),(0,r.kt)("p",null,"map creates a new array by transforming every element in an array individually.\nfilter creates a new array by removing elements that don't belong.\nreduce, on the other hand, takes all of the elements in an array and reduces them into a single value."),(0,r.kt)("p",null,'Notice that the callback gets a previous value on each iteration.\nOn the first iteration, there is no previous value.\nThis is why you have the option to pass reduce an initial value: It acts as the "previous value"\nfor the first iteration, when there otherwise wouldn\'t be one.\nFinally, bear in mind that reduce returns a single value, not an array containing a single item.'),(0,r.kt)("p",null,"The three big gotchas with reduce are:\nforgetting to return\nforgetting an initial value\nexpecting an array when reduce returns a single value"),(0,r.kt)("p",null,"REMEMBER THE RETURN STATEMENT IN THE CALLBACK;"),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("p",{parentName:"admonition"},"Keep in mind that reduce always returns a single value, not always a single number. "),(0,r.kt)("p",{parentName:"admonition"},"If you reduce an array of arrays, for instance, it will return a single array.")))}c.isMDXComponent=!0},1401:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/MapFilterReduce-a392061611b7a88254ac0cf0f95908ce.png"}}]);